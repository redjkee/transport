import pandas as pd
import openpyxl
import re
from pathlib import Path
from datetime import datetime
import os

def detect_month_from_files(files):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–µ—Å—è—Ü –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤"""
    month_names = {
        '01': '—è–Ω–≤–∞—Ä—å', '02': '—Ñ–µ–≤—Ä–∞–ª—å', '03': '–º–∞—Ä—Ç', '04': '–∞–ø—Ä–µ–ª—å',
        '05': '–º–∞–π', '06': '–∏—é–Ω—å', '07': '–∏—é–ª—å', '08': '–∞–≤–≥—É—Å—Ç',
        '09': '—Å–µ–Ω—Ç—è–±—Ä—å', '10': '–æ–∫—Ç—è–±—Ä—å', '11': '–Ω–æ—è–±—Ä—å', '12': '–¥–µ–∫–∞–±—Ä—å'
    }
    
    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –º–µ—Å—è—Ü –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö —Ñ–∞–π–ª–æ–≤
    for file_path in files:
        filename = file_path.name.lower()
        
        # –ò—â–µ–º —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
        for month_num, month_name in month_names.items():
            if month_name in filename:
                return month_name
        
        # –ò—â–µ–º —á–∏—Å–ª–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
        month_match = re.search(r'(\d{2})\.?xlsx', filename)
        if month_match:
            month_num = month_match.group(1)
            if month_num in month_names:
                return month_names[month_num]
    
    # –ï—Å–ª–∏ –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π
    current_month = datetime.now().month
    return month_names.get(str(current_month).zfill(2), "—Ç–µ–∫—É—â–∏–π_–º–µ—Å—è—Ü")

def find_table_structure(ws):
    """–ù–∞—Ö–æ–¥–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–∞–º"""
    print("üîç –ò—â—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã...")
    
    headers_positions = {}
    
    for row in ws.iter_rows():
        for cell in row:
            if cell.value:
                cell_value = str(cell.value).strip()
                
                if "–¢–æ–≤–∞—Ä—ã (—Ä–∞–±–æ—Ç—ã, —É—Å–ª—É–≥–∏)" in cell_value:
                    headers_positions['description'] = (cell.row, cell.column)
                    print(f"üìã –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ '–¢–æ–≤–∞—Ä—ã' –≤ —Å—Ç—Ä–æ–∫–µ {cell.row}, —Å—Ç–æ–ª–±—Ü–µ {cell.column}")
                elif "–°—É–º–º–∞" in cell_value and cell_value != "–°—É–º–º–∞ —Å –ù–î–°":
                    headers_positions['amount'] = (cell.row, cell.column)
                    print(f"üí∞ –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ '–°—É–º–º–∞' –≤ —Å—Ç—Ä–æ–∫–µ {cell.row}, —Å—Ç–æ–ª–±—Ü–µ {cell.column}")
                elif "‚Ññ" == cell_value and cell.column < 10:
                    headers_positions['number'] = (cell.row, cell.column)
                    print(f"üî¢ –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ '‚Ññ' –≤ —Å—Ç—Ä–æ–∫–µ {cell.row}, —Å—Ç–æ–ª–±—Ü–µ {cell.column}")
                elif "–ö–æ–ª-–≤–æ" in cell_value:
                    headers_positions['quantity'] = (cell.row, cell.column)
                    print(f"üì¶ –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ '–ö–æ–ª-–≤–æ' –≤ —Å—Ç—Ä–æ–∫–µ {cell.row}, —Å—Ç–æ–ª–±—Ü–µ {cell.column}")
                elif "–ï–¥." in cell_value:
                    headers_positions['unit'] = (cell.row, cell.column)
                    print(f"üìè –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ '–ï–¥.' –≤ —Å—Ç—Ä–æ–∫–µ {cell.row}, —Å—Ç–æ–ª–±—Ü–µ {cell.column}")
                elif "–¶–µ–Ω–∞" in cell_value:
                    headers_positions['price'] = (cell.row, cell.column)
                    print(f"üè∑Ô∏è –ù–∞–π–¥–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫ '–¶–µ–Ω–∞' –≤ —Å—Ç—Ä–æ–∫–µ {cell.row}, —Å—Ç–æ–ª–±—Ü–µ {cell.column}")
    
    return headers_positions

def extract_data_from_description(description):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É, –º–∞—Ä—à—Ä—É—Ç, –≥–æ—Å. –Ω–æ–º–µ—Ä –∏ —Ñ–∞–º–∏–ª–∏—é –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è"""
    description_str = str(description)
    
    # –ú–∞—Ä—à—Ä—É—Ç (–≤—Å–µ –¥–æ –ø–µ—Ä–≤–æ–π –∑–∞–ø—è—Ç–æ–π)
    route = description_str.split(',')[0].strip()
    
    # –î–∞—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç "–æ—Ç 06.09.25")
    date_match = re.search(r'–æ—Ç\s+(\d{2}\.\d{2}\.\d{2})', description_str)
    date_str = date_match.group(1) if date_match else "–î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    # –ì–æ—Å. –Ω–æ–º–µ—Ä - –∏—â–µ–º 3 —Ü–∏—Ñ—Ä—ã –ø–æ–¥—Ä—è–¥
    plate_match = re.search(r'(\d{3})', description_str)
    car_plate = plate_match.group(1) if plate_match else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –§–∞–º–∏–ª–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
    driver_match = re.search(r',\s*([–ê-–Ø][–∞-—è]+)\s+[–ê-–Ø]\.[–ê-–Ø]\.', description_str)
    if driver_match:
        driver_name = driver_match.group(1)
    else:
        alt_driver_match = re.search(r',\s*([–ê-–Ø][–∞-—è]+)', description_str)
        driver_name = alt_driver_match.group(1) if alt_driver_match else "–§–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    return route, date_str, car_plate, driver_name

def parse_invoice_file(file_path):
    """–ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª —Å—á–µ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    try:
        print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {file_path.name}")
        wb = openpyxl.load_workbook(file_path, data_only=True)
        ws = wb.active
        
        headers = find_table_structure(ws)
        
        if not headers.get('description') or not headers.get('amount'):
            print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã")
            return []
        
        header_row = max(h[0] for h in headers.values())
        description_col = headers['description'][1]
        amount_col = headers['amount'][1]
        
        print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞:")
        print(f"   - –°—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {header_row + 1}")
        print(f"   - –°—Ç–æ–ª–±–µ—Ü –æ–ø–∏—Å–∞–Ω–∏—è: {description_col}")
        print(f"   - –°—Ç–æ–ª–±–µ—Ü —Å—É–º–º—ã: {amount_col}")
        
        parsed_data = []
        row_num = header_row + 1
        processed_count = 0
        current_empty_rows = 0
        max_empty_rows = 5
        
        print(f"üîé –ß–∏—Ç–∞—é –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã...")
        
        while current_empty_rows < max_empty_rows:
            description_cell = ws.cell(row=row_num, column=description_col)
            description = description_cell.value
            
            if not description:
                current_empty_rows += 1
                row_num += 1
                continue
                
            current_empty_rows = 0
            description_str = str(description)
            
            if any(word in description_str.lower() for word in ['–∏—Ç–æ–≥–æ', '–≤—Å–µ–≥–æ', '–∏—Ç–æ–≥', '—Å—É–º–º–∞']):
                row_num += 1
                continue
            
            amount_cell = ws.cell(row=row_num, column=amount_col)
            amount = amount_cell.value
            
            if amount is not None:
                try:
                    if isinstance(amount, str) and any(char.isalpha() for char in amount.replace(' ', '').replace(',', '.')):
                        row_num += 1
                        continue
                    
                    amount_str = str(amount).replace(' ', '').replace(',', '.')
                    amount_value = float(amount_str)
                    
                    route, date_str, car_plate, driver_name = extract_data_from_description(description_str)
                    
                    if car_plate != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and amount_value > 0:
                        parsed_data.append({
                            '–î–∞—Ç–∞': date_str,
                            '–ú–∞—Ä—à—Ä—É—Ç': route,
                            '–°—Ç–æ–∏–º–æ—Å—Ç—å': amount_value,
                            '–ì–æ—Å_–Ω–æ–º–µ—Ä': car_plate,
                            '–í–æ–¥–∏—Ç–µ–ª—å': driver_name,
                            '–ò—Å—Ç–æ—á–Ω–∏–∫': file_path.name,
                            '–°—Ç—Ä–æ–∫–∞': row_num
                        })
                        processed_count += 1
                        print(f"‚úÖ –°—Ç—Ä–æ–∫–∞ {row_num}: {date_str} | {route[:20]}... | {car_plate} | {driver_name} | {amount_value:,.0f} —Ä—É–±.")
                    
                except (ValueError, TypeError):
                    pass
            
            row_num += 1
            
            if row_num > header_row + 1000:
                print("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 1000 —Å—Ç—Ä–æ–∫")
                break
        
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {processed_count}")
        return parsed_data
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
        return []

def create_report(data, columns, output_path, sheet_name="–û—Ç—á–µ—Ç"):
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –±–µ–∑ –∂–∏—Ä–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞"""
    if data.empty:
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É (–±–µ–∑ –∂–∏—Ä–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞)
    total_row = pd.DataFrame([{col: '' for col in columns}])
    total_row['–°—Ç–æ–∏–º–æ—Å—Ç—å'] = data['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum()
    total_row[columns[0]] = '–ò–¢–û–ì–û:'
    
    final_df = pd.concat([data, total_row], ignore_index=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
    with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
        final_df.to_excel(writer, sheet_name=sheet_name, index=False)
        worksheet = writer.sheets[sheet_name]
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
        column_widths = {'–î–∞—Ç–∞': 12, '–ú–∞—Ä—à—Ä—É—Ç': 30, '–í–æ–¥–∏—Ç–µ–ª—å': 15, '–ì–æ—Å_–Ω–æ–º–µ—Ä': 12, '–°—Ç–æ–∏–º–æ—Å—Ç—å': 15}
        
        for i, col in enumerate(columns, 1):
            col_letter = chr(64 + i)
            worksheet.column_dimensions[col_letter].width = column_widths.get(col, 15)

def data_quality_check(df):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–¥–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç"""
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –î–ê–ù–ù–´–•...")
    
    issues = []
    detailed_info = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    duplicates = df.duplicated().sum()
    if duplicates > 0:
        issues.append(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {duplicates} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤")
        dup_data = df[df.duplicated()]
        for _, row in dup_data.iterrows():
            detailed_info.append(f"   –î—É–±–ª–∏–∫–∞—Ç: {row['–î–∞—Ç–∞']} | {row['–ú–∞—Ä—à—Ä—É—Ç'][:30]}... | {row['–í–æ–¥–∏—Ç–µ–ª—å']} | {row['–°—Ç–æ–∏–º–æ—Å—Ç—å']:,.0f} —Ä—É–±.")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã
    missing_dates = df[df['–î–∞—Ç–∞'] == '–î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞']
    if len(missing_dates) > 0:
        issues.append(f"‚ö†Ô∏è –í {len(missing_dates)} –∑–∞–ø–∏—Å—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞")
        for _, row in missing_dates.iterrows():
            detailed_info.append(f"   –ù–µ—Ç –¥–∞—Ç—ã: {row['–ú–∞—Ä—à—Ä—É—Ç'][:30]}... | {row['–í–æ–¥–∏—Ç–µ–ª—å']} | {row['–°—Ç–æ–∏–º–æ—Å—Ç—å']:,.0f} —Ä—É–±.")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π
    unknown_drivers = df[df['–í–æ–¥–∏—Ç–µ–ª—å'] == '–§–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞']
    if len(unknown_drivers) > 0:
        issues.append(f"‚ö†Ô∏è –í {len(unknown_drivers)} –∑–∞–ø–∏—Å—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ñ–∞–º–∏–ª–∏—è –≤–æ–¥–∏—Ç–µ–ª—è")
        for _, row in unknown_drivers.iterrows():
            detailed_info.append(f"   –ù–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—è: {row['–î–∞—Ç–∞']} | {row['–ú–∞—Ä—à—Ä—É—Ç'][:30]}... | {row['–ì–æ—Å_–Ω–æ–º–µ—Ä']} | {row['–°—Ç–æ–∏–º–æ—Å—Ç—å']:,.0f} —Ä—É–±.")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
    unknown_cars = df[df['–ì–æ—Å_–Ω–æ–º–µ—Ä'] == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ']
    if len(unknown_cars) > 0:
        issues.append(f"‚ö†Ô∏è –í {len(unknown_cars)} –∑–∞–ø–∏—Å—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω –≥–æ—Å –Ω–æ–º–µ—Ä")
        for _, row in unknown_cars.iterrows():
            detailed_info.append(f"   –ù–µ—Ç –Ω–æ–º–µ—Ä–∞: {row['–î–∞—Ç–∞']} | {row['–ú–∞—Ä—à—Ä—É—Ç'][:30]}... | {row['–í–æ–¥–∏—Ç–µ–ª—å']} | {row['–°—Ç–æ–∏–º–æ—Å—Ç—å']:,.0f} —Ä—É–±.")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ —Å—É–º–º—ã
    if len(df) > 0:
        avg_amount = df['–°—Ç–æ–∏–º–æ—Å—Ç—å'].mean()
        std_amount = df['–°—Ç–æ–∏–º–æ—Å—Ç—å'].std()
        anomalies = df[df['–°—Ç–æ–∏–º–æ—Å—Ç—å'] > avg_amount + 2 * std_amount]
        if len(anomalies) > 0:
            issues.append(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(anomalies)} –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Å—É–º–º (–≤—ã—à–µ {avg_amount + 2 * std_amount:,.0f} —Ä—É–±.)")
            for _, row in anomalies.iterrows():
                detailed_info.append(f"   –ê–Ω–æ–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {row['–î–∞—Ç–∞']} | {row['–ú–∞—Ä—à—Ä—É—Ç'][:30]}... | {row['–í–æ–¥–∏—Ç–µ–ª—å']} | {row['–°—Ç–æ–∏–º–æ—Å—Ç—å']:,.0f} —Ä—É–±. (—Å—Ä–µ–¥–Ω–µ–µ: {avg_amount:,.0f} —Ä—É–±.)")
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
    if issues:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—á–µ—Å—Ç–≤–æ–º –¥–∞–Ω–Ω—ã—Ö:")
        for issue in issues:
            print(f"   {issue}")
        
        print(f"\nüìã –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º:")
        for info in detailed_info:
            print(info)
    else:
        print("‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ª–∏—á–Ω–æ–µ! –ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    
    return issues, detailed_info

def main():
    # –ü–£–¢–ò
    input_folder = Path("C:/–ø–∞–ø–∫–∞_—Å_–æ—Ç—á–µ—Ç–∞–º–∏")
    base_output_folder = Path("C:/folder")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    auto_folder = base_output_folder / "–∞–≤—Ç–æ"
    driver_folder = base_output_folder / "–≤–æ–¥–∏—Ç–µ–ª—å"
    
    auto_folder.mkdir(parents=True, exist_ok=True)
    driver_folder.mkdir(parents=True, exist_ok=True)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ —Å –æ—Ç—á–µ—Ç–∞–º–∏
    if not input_folder.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ —Å –æ—Ç—á–µ—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {input_folder}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
    files = list(input_folder.glob("*.xlsx"))
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
    
    if not files:
        print("‚ùå –ù–µ—Ç Excel-—Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—è—Ü
    month_name = detect_month_from_files(files)
    print(f"üìÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –º–µ—Å—è—Ü: {month_name}")
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    all_data = []
    
    print("\nüîç –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–æ–≤...")
    for file_path in files:
        if '~' in file_path.name:
            continue
        file_data = parse_invoice_file(file_path)
        all_data.extend(file_data)
        print("=" * 80)
    
    if not all_data:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame(all_data)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö (—Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º)
    data_quality_check(df)
    
    print(f"\nüéâ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"üìà –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(all_data)}")
    print(f"üöó –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥–æ—Å. –Ω–æ–º–µ—Ä–∞: {', '.join([x for x in df['–ì–æ—Å_–Ω–æ–º–µ—Ä'].unique() if x != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'])}")
    print(f"üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏: {', '.join([x for x in df['–í–æ–¥–∏—Ç–µ–ª—å'].unique() if x != '–§–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'])}")
    
    # –°–û–ó–î–ê–ï–ú –û–¢–ß–ï–¢–´ –ü–û –ê–í–¢–û–ú–û–ë–ò–õ–Ø–ú
    print(f"\nüöó –°–û–ó–î–ê–Æ –û–¢–ß–ï–¢–´ –ü–û –ê–í–¢–û–ú–û–ë–ò–õ–Ø–ú...")
    for car_plate, car_data in df.groupby('–ì–æ—Å_–Ω–æ–º–µ—Ä'):
        if car_plate == "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
            continue
            
        car_data_sorted = car_data.sort_values('–î–∞—Ç–∞')
        report_data = car_data_sorted[['–î–∞—Ç–∞', '–ú–∞—Ä—à—Ä—É—Ç', '–í–æ–¥–∏—Ç–µ–ª—å', '–°—Ç–æ–∏–º–æ—Å—Ç—å']].copy()
        
        filename = f"{car_plate} {month_name}.xlsx"
        filepath = auto_folder / filename
        
        create_report(report_data, ['–î–∞—Ç–∞', '–ú–∞—Ä—à—Ä—É—Ç', '–í–æ–¥–∏—Ç–µ–ª—å', '–°—Ç–æ–∏–º–æ—Å—Ç—å'], filepath)
        
        total_amount = report_data['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum()
        print(f"üíæ –ê–≤—Ç–æ –æ—Ç—á–µ—Ç: {filename} (–∑–∞–ø–∏—Å–µ–π: {len(report_data)}, —Å—É–º–º–∞: {total_amount:,.0f} —Ä—É–±.)")
    
    # –°–û–ó–î–ê–ï–ú –û–¢–ß–ï–¢–´ –ü–û –í–û–î–ò–¢–ï–õ–Ø–ú
    print(f"\nüë§ –°–û–ó–î–ê–Æ –û–¢–ß–ï–¢–´ –ü–û –í–û–î–ò–¢–ï–õ–Ø–ú...")
    for driver_name, driver_data in df.groupby('–í–æ–¥–∏—Ç–µ–ª—å'):
        if driver_name == "–§–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞":
            continue
            
        driver_data_sorted = driver_data.sort_values('–î–∞—Ç–∞')
        report_data = driver_data_sorted[['–î–∞—Ç–∞', '–ú–∞—Ä—à—Ä—É—Ç', '–ì–æ—Å_–Ω–æ–º–µ—Ä', '–°—Ç–æ–∏–º–æ—Å—Ç—å']].copy()
        
        safe_driver_name = re.sub(r'[<>:"/\\|?*]', '_', driver_name)
        filename = f"{safe_driver_name} {month_name}.xlsx"
        filepath = driver_folder / filename
        
        create_report(report_data, ['–î–∞—Ç–∞', '–ú–∞—Ä—à—Ä—É—Ç', '–ì–æ—Å_–Ω–æ–º–µ—Ä', '–°—Ç–æ–∏–º–æ—Å—Ç—å'], filepath)
        
        total_amount = report_data['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum()
        car_plates = ', '.join(driver_data_sorted['–ì–æ—Å_–Ω–æ–º–µ—Ä'].unique())
        print(f"üíæ –í–æ–¥–∏—Ç–µ–ª—å –æ—Ç—á–µ—Ç: {filename} (–∑–∞–ø–∏—Å–µ–π: {len(report_data)}, —Å—É–º–º–∞: {total_amount:,.0f} —Ä—É–±.)")
    
    # –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"üìÅ –û—Ç—á–µ—Ç—ã –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º: {auto_folder}")
    print(f"üìÅ –û—Ç—á–µ—Ç—ã –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º: {driver_folder}")
    print(f"üöó –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {df['–ì–æ—Å_–Ω–æ–º–µ—Ä'].nunique() - 1}")
    print(f"üë§ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {df['–í–æ–¥–∏—Ç–µ–ª—å'].nunique() - 1}")
    print(f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {df['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum():,.0f} —Ä—É–±.")

if __name__ == "__main__":
    main()
    #test_2